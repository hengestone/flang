//assumes little endian
fn to_bin (i32 size, ptr(u8) b) : i32 {
  var u8 byte;
  var i32 i;
  var i32 j;

  for i = size - 1; i >= 0; i = i - 1 {
    //printf("byte = %c\n", b[i]);
    for j = 7; j >= 0; j-- {
      byte = cast(u8) (b[i] & (1<<j));
      byte = cast(u8) (byte >> j);
      //printf("%d - %u\n", i + j, byte);
      printf("%u", byte);
    }
  }
  printf("\n");
  return 0;
}

var i8 _i8 = -8;
var i16 _i16 = 16;
var i32 _i32 = 32;
var i64 _i64 = 64;

// promotions
_i16 = _i8;
_i32 = _i16;
_i64 = _i32;

printf("i8 = -8 @ binary = ");
to_bin(1, cast(ptr(u8)) &_i8);
printf("i16 = (i8)-8 @ binary = ");
to_bin(2, cast(ptr(u8)) &_i16);
printf("_i32 = (i16)(i8)-8 @ binary = ");
to_bin(4, cast(ptr(u8)) &_i32);
printf("_i64 = (i32)(i16)(i8)-8 @ binary = ");
to_bin(8, cast(ptr(u8)) &_i64);
