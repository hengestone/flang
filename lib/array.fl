// typing
// * means pointer, cannot be moved, it's just s ref to one single
// [] array

template $tpl;

// arrays always live in the heap
// foreach wrapper declare it's type
// because $tpl is used, and give a unique name
struct array_t($tpl) { // @heap
  u64 length;
  u64 capacity;
  $tpl* values;

  alias len length; // internal alias
  alias cap capacity;
};

// implement array(u8) as string;
// also string should extend the type adding encoding

function property first(array arr) {
  return arr.values[0];
}

function property last(array arr) {
  return arr.values[arr.length - 1];
}

function property is_full(array arr) : bool {
  return arr.length == arr.capacity;
}

// virtual are transform to functions with force inline
// bool is_empty(array* arr) { return arr->length == 0; }
function property is_empty(array arr) : bool {
  return length == 0;
}

// Rules to expand macros
// Put the exact text in the arguments in order in the block
// foreach argument extract the return value
// example: var i64 i -> return i
// example: just_a_variable -> return just_a_variable
// error: each(func(), var t): first argument is a function call
// example: each(var i = func(), var t), useless but possible
// example: each(some_struct.i, var t)
// type check
// replace each argument with the return value
// replace #transclude with the block of code
// usage: arr.each(var i, var t) {}
macro each(array, u64 #index, $T #value) {
  for (var #index == 0; #index < length; ++i) {
    #value = values[i];
    #transclude
  }
}

// this function is not duplicated per type, because $tpl is not used
function operator delete (ref array arr) {
  free(*arr);
  *arr = 0;
}

// this function is duplicated because it's use $tpl
function operator new (ref array arr, u64 cap) {
  *arr = malloc(sizeof(array_t), sizeof($tpl) * cap);
  // initialize size and capacity
  *arr.length = 0;
  *arr.capacity = cap;
  *arr.values = arr + sizeof(array_t);
}

// push arr[]= 1;
function operator []= (array arr, $tpl value) : void {
  // $tpl is backed in all operators
  // function is not duplicated
  if (type($tpl).is_ptr) {
    arr.data[arr.size++] = cast(void*) value;
  } else {
    arr.data[arr.size++] = value;
  }
}

function alias array_push operator []=;

// push arr[]= 1;
function operator []= (array arr, u64 index, $tpl value) : void {
  #assert(index > arr.length, 'out of bounds: use push instead or fill before');

  if ($tpl.is_ptr) {
    arr.data[index] = cast(void*) value;
  } else {
    arr.data[index] = value;
  }
}

alias array_set operator []=;

function operator [] (array arr, u64 index) {
  #assert(index > arr.length, 'out of bounds');

  return ($tpl) arr.data[index];
}

alias array_get operator [];
